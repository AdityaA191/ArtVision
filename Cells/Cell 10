%%writefile artvision/demo.py
import os
import uuid
import matplotlib.pyplot as plt
from IPython.display import display, HTML, clear_output
import ipywidgets as widgets
import io
import contextlib  # <-- NEW

from emotion_analyzer import EmotionAnalyzer
from image_generator import ImageGenerator
from style_transfer import StyleTransfer

class ArtVisionDemo:
    def __init__(self):
        self.emotion_analyzer = EmotionAnalyzer()
        self.image_generator = ImageGenerator()
        self.style_transfer = StyleTransfer()

        # Available styles
        self.styles = {
            "none": "No Style",
            "Van Gogh": "Starry Night",
            "Kandinsky": "Kandinsky",
            "Monet": "Monet",
            "Picasso": "Picasso"
        }

        # Create output directory
        os.makedirs("artvision/static/images", exist_ok=True)

    def generate_image(self, prompt, style_name="none", seed=None):
        """Generate an image based on the prompt and apply style if selected"""

        # Capture all stdout output
        log_stream = io.StringIO()
        with contextlib.redirect_stdout(log_stream):
            # Analyze emotion in the text
            emotion_data = self.emotion_analyzer.analyze_emotion(prompt)

            # Display emotion analysis
            print(f"Detected emotion: {emotion_data['dominant_emotion']} (confidence: {emotion_data['emotion_score']:.2f})")
            print(f"Emotional prompt enhancement: {emotion_data['prompt_prefix']}")

            # Generate a unique ID for this generation
            generation_id = str(uuid.uuid4())[:8]

            # Generate the base image
            print("Generating base image...")
            base_image = self.image_generator.generate_image(prompt, emotion_data, seed)
            base_image_path = self.image_generator.save_image(base_image, f"{generation_id}_base.jpg")

            # Display the base image
            plt.figure(figsize=(10, 10))
            plt.imshow(base_image)
            plt.axis('off')
            plt.title(f"Base Image: {prompt}")
            plt.show()

            # Apply style transfer if a style is selected
            if style_name != "none":
                print(f"Applying {self.styles[style_name]} style...")
                final_image_path = os.path.join("artvision/static/images", f"{generation_id}_styled.jpg")
                self.style_transfer.apply_style(
                    base_image_path,
                    style_name,
                    final_image_path,
                    num_steps=100  # Reduced for demo purposes
                )

                # Display the styled image
                styled_image = plt.imread(final_image_path)
                plt.figure(figsize=(10, 10))
                plt.imshow(styled_image)
                plt.axis('off')
                plt.title(f"Styled Image: {self.styles[style_name]}")
                plt.show()

                # Return styled image path and debug logs
                return final_image_path, log_stream.getvalue()

            # Return base image path and debug logs
            return base_image_path, log_stream.getvalue()
